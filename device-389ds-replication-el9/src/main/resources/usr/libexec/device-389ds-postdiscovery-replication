#!/bin/bash

#
# 389 Directory Server Postdiscovery - replication
# ================================================
#
# This script adds replication to instances.

set -e

request="${1}"
instance="${2}"

exec 2> >(logger -t ${0})

umask 0027

#
# Handle the cleanup
# ------------------
cleanup_before_exit () {
  if [ -d "${tmpdir}" ]; then
    rm -rf "${tmpdir}"
  fi
}
# be in a temporay workspace (this works on linux and macosx)
tmpdir=`mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir'`
# trap catches the exit signal and runs the specified function
trap cleanup_before_exit EXIT
# be in our directory
cd "${tmpdir}"


#
# Add/update/remove replication

# make sure replication is present
logger -t dirsrv-postdiscovery "adding replication manager on instance ${instance}..."

replication_ldif="replication.ldif"

cat > ${replication_ldif} <<-EOF
# create the supplier bind dn
dn: ou=Replication Managers,cn=config
objectClass: top
objectClass: organizationalUnit
ou: Replication Managers

EOF

cat ${replication_ldif} | /usr/bin/ldapadd -c -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL 2> /dev/null || true

logger -t dirsrv-postdiscovery "added replication manager on instance ${instance}."



#
# Walk through each entry under replication, enable or disable as needed.
#
find /etc/device/services/ldap/replication/replica -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  if [ ! -e "$line/suffix.d/instance.d/name.txt" ]; then
    continue;
  fi
  if [ "${instance}" != "$(head -n 1 $line/suffix.d/instance.d/name.txt)" ]; then
    continue;
  fi

  if [ ! -e "$line/replica-id.txt" ]; then
    continue;
  elif [ ! -e "$line/role.txt" ]; then
    continue;
  elif [ ! -L "$line/suffix.d" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/suffix.txt" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/userroot.txt" ]; then
    continue;
  fi

  suffix="$(head -n 1 $line/suffix.d/suffix.txt)"
  userroot="$(head -n 1 $line/suffix.d/userroot.txt)"
  replica="$(head -n 1 $line/replica-id.txt)"
  role="$(head -n 1 $line/role.txt)"

   # remove old instances
  if test -f "$line/removed"; then

    target=$(readlink -f "$line")

    if test ! -f "$line/disabled.bin"; then

      logger -t dirsrv-postdiscovery "disabling directory server replication on instance ${instance} / suffix ${suffix}..."

      logger -t dirsrv-postdiscovery "dsconf \"ldapi://%2frun%2fslapd-${instance}.socket\" replication disable --suffix \"${suffix}\""

      dsconf "ldapi://%2frun%2fslapd-${instance}.socket" replication disable --suffix "${suffix}" > /dev/null || echo "Could not disable replication on ${instance} / ${suffix}" > "$line/error"

      if test ! -f "$line/error"; then
        logger -t dirsrv-postdiscovery "disabled directory server replication on instance ${instance} / suffix ${suffix}."
      else
        logger -t dirsrv-postdiscovery "failed to disable directory server replication for instance ${instance} / suffix ${suffix}."
      fi

    fi

    /usr/bin/ldapdelete -c -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL "ou=${userroot},ou=Replication Managers,cn=config" 2> /dev/null || true

    logger -t dirsrv-postdiscovery "removed replication manager on instance ${instance}."

    # remove folder
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"

  # add/update new replication?
  elif test -f "$line/added" -o -f "$line/updated"; then

    rm -f "$line/error"

    replication_ldif="replication.ldif"

    cat > ${replication_ldif} <<-EOF
dn: ou=${userroot},ou=Replication Managers,cn=config
objectClass: top
objectClass: groupOfUniqueNames
cn: ${userroot}
nsIdleTimeout: 0
description: Accounts that are allowed to push replication to '${userroot}' / '${suffix}'

EOF

    cat ${replication_ldif} | /usr/bin/ldapadd -c -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL 2> /dev/null || true

    logger -t dirsrv-postdiscovery "added replication manager on instance ${instance}."

    if test -f "$line/disabled.bin"; then

      logger -t dirsrv-postdiscovery "disabling directory server replication on instance ${instance} / suffix ${suffix}..."

      logger -t dirsrv-postdiscovery "dsconf \"ldapi://%2frun%2fslapd-${instance}.socket\" replication disable --suffix \"${suffix}\""

      dsconf "ldapi://%2frun%2fslapd-${instance}.socket" replication disable --suffix "${suffix}" > /dev/null || echo "Could not disable replication on ${instance} / ${suffix}" > "$line/error"

      if test ! -f "$line/error"; then
        logger -t dirsrv-postdiscovery "disabled directory server replication on instance ${instance} / suffix ${suffix}."
      else
        logger -t dirsrv-postdiscovery "failed to disable directory server replication for instance ${instance} / suffix ${suffix}."
      fi

    else

      if [ "${role}" = "supplier" ]; then

        logger -t dirsrv-postdiscovery "setting directory server replication to 'supplier' with replica ID '${replica}' on instance ${instance} / suffix ${suffix}..."

	logger -t dirsrv-postdiscovery "dsconf \"ldapi://%2frun%2fslapd-${instance}.socket\" replication enable --suffix \"${suffix}\" --role \"${role}\" --bind-group-dn \"ou=${userroot},ou=Replication Managers,cn=config\" --replica-id \"${replica}\""

        dsconf "ldapi://%2frun%2fslapd-${instance}.socket" replication enable --suffix "${suffix}" --role "${role}" --bind-group-dn "ou=${userroot},ou=Replication Managers,cn=config" --replica-id "${replica}" > /dev/null || echo "Could not enable 'supplier' replication on ${instance} / ${suffix}" > "$line/error"

        if test ! -f "$line/error"; then
          logger -t dirsrv-postdiscovery "set directory server 'supplier' replication with replica ID '${replica}' on instance ${instance} / suffix ${suffix}."
        else
          logger -t dirsrv-postdiscovery "failed to set directory server 'supplier' replication with replica ID '${replica}' for instance ${instance} / suffix ${suffix}."
          continue
        fi

      else

        logger -t dirsrv-postdiscovery "enabling directory server replication to '${role}' on instance ${instance} / suffix ${suffix}..."

	logger -t dirsrv-postdiscovery "dsconf \"ldapi://%2frun%2fslapd-${instance}.socket\" replication enable --suffix \"${suffix}\" --role \"${role}\" --bind-group-dn \"ou=${userroot},ou=Replication Managers,cn=config\""

        dsconf "ldapi://%2frun%2fslapd-${instance}.socket" replication enable --suffix "${suffix}" --role "${role}" --bind-group-dn "ou=${userroot},ou=Replication Managers,cn=config" > /dev/null || echo "Could not enable '${role}' replication for replica '${replica}' on ${instance} / ${suffix}" > "$line/error"

        if test ! -f "$line/error"; then
          logger -t dirsrv-postdiscovery "enabled directory server '${role}' replication on instance ${instance} / suffix ${suffix}."
        else
          logger -t dirsrv-postdiscovery "failed to enable directory server '${role}' replication for instance ${instance} / suffix ${suffix}."
          continue
        fi

      fi

    fi

    if test -f "$line/added"; then
      rm -f "$line/added"
    else
      rm -f "$line/updated"
    fi

  fi

done


#
# Walk through each certificate allowed to replicate to us, enable or disable as needed.
#
# NOTE: you need to restart the service after every change to the certificates list, until
# this bug is fixed: https://github.com/389ds/389-ds-base/issues/6106
#
find /etc/device/services/ldap/replication/certificate/ -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  if [ ! -e "$line/suffix.d/instance.d/name.txt" ]; then
    continue;
  fi
  if [ "${instance}" != "$(head -n 1 $line/suffix.d/instance.d/name.txt)" ]; then
    continue;
  fi

  if [ ! -e "$line/name.txt" ]; then
    continue;
  elif [ ! -L "$line/suffix.d" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/suffix.txt" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/userroot.txt" ]; then
    continue;
  elif [ ! -L "$line/suffix.d/instance.d" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/instance.d/name.txt" ]; then
    continue;
  fi

  suffix="$(head -n 1 $line/suffix.d/suffix.txt)"
  userroot="$(head -n 1 $line/suffix.d/userroot.txt)"
  cert="$(head -n 1 $line/name.txt)"

  # remove old certificates
  if test -f "$line/removed"; then

    target=$(readlink -f "$line")

    if test ! -f "$line/disabled.bin"; then

      ldapmodify -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL <<- EOF || true
dn: ou=${userroot},ou=Replication Managers,cn=config
changetype: modify
delete: uniqueMember
uniqueMember: cn=${cert},ou=${userroot},ou=Replication Managers,cn=config

EOF

    fi

    ldapdelete -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL "cn=${cert},ou=${userroot},ou=Replication Managers,cn=config" || true

    # remove folder
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"

  # add new certificates
  elif test -f "$line/added"; then

    usercerts=

    if test ! -L "$line/certificate.d"; then
      continue;
    else
      target=$(readlink -f "$line/certificate.d")
      uuid="$(basename $target)"
    fi

    rm -f "/run/dirsrv/slapd-${instance}-replication-${uuid}.yaml"

    logger -t dirsrv-postdiscovery "${request}ing 389ds replication certificate..."

    redwax-tool --pem-in="/run/pki-certificate/certificate-${uuid}.pem" \
                --no-chain-out --no-root-out --no-crl-out --no-key-out \
                --der-out "${cert}-replicate.der" \
                --no-cert-out --chain-out --trust-out \
                --secret-token-out="/etc/dirsrv/slapd-${instance}/pin.txt" \
                --auto-out \
                --nss-out=/etc/dirsrv/slapd-${instance}/ || echo "Could not find and verify certificate for replication" > "$line/error"

    logger -t dirsrv-postdiscovery "${request}ed 389ds replication certificate."

    while read usercert; do
      usercerts+="userCertificate:< file://${usercert}"$'\n'
      usercerts+="nsCertSubjectDN: $(openssl x509 -noout -subject -nameopt RFC2253 -in "${usercert}" | cut -c 9-)"$'\n'
    done < <(find . -name "${cert}-replicate.der.*" -mindepth 1 -maxdepth 1 -type f -exec realpath {} \;)

    if test ! -f "$line/disabled.bin"; then
      accountlock="false"
    else
      accountlock="true"
    fi

    ldapadd -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL <<- EOF || true
dn: cn=${cert},ou=${userroot},ou=Replication Managers,cn=config
objectClass: top
objectClass: organizationalRole
objectClass: nsAccount
cn: ${cert}
description: Replication user added by ${0}
nsAccountLock: ${accountlock}
${usercerts}
EOF

    ldapmodify -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL <<- EOF || true
dn: ou=${userroot},ou=Replication Managers,cn=config
changetype: modify
add: uniqueMember
uniqueMember: cn=${cert},ou=${userroot},ou=Replication Managers,cn=config

EOF

    rm -f "$line/added"

  # refresh certificates
  else

    usercerts=
    usersubjects=

    if test ! -L "$line/certificate.d"; then
      continue;
    else
      target=$(readlink -f "$line/certificate.d")
      uuid="$(basename $target)"
    fi

    redwax-tool --pem-in="/run/pki-certificate/certificate-${uuid}.pem" \
                --no-chain-out --no-root-out --no-crl-out --no-key-out \
                --der-out "${cert}-replicate.der" \
                --no-cert-out --chain-out --trust-out \
                --secret-token-out="/etc/dirsrv/slapd-${instance}/pin.txt" \
                --auto-out \
                --nss-out=/etc/dirsrv/slapd-${instance}/ || echo "Could not find and verify certificate for replication" > "$line/error"

    while read usercert; do
      usercerts+="userCertificate:< file://${usercert}"$'\n'
      usersubjects+="nsCertSubjectDN: $(openssl x509 -noout -subject -nameopt RFC2253 -in "${usercert}" | cut -c 9-)"$'\n'
    done < <(find . -name "${cert}-replicate.der.*" -mindepth 1 -maxdepth 1 -type f -exec realpath {} \;)

    if test ! -f "$line/disabled.bin"; then
      accountlock="false"
    else
      accountlock="true"
    fi

    ldapmodify -H "ldapi://%2frun%2fslapd-${instance}.socket" -Y EXTERNAL <<- EOF || true
dn: cn=${cert},ou=${userroot},ou=Replication Managers,cn=config
changetype: modify
replace: nsAccountLock
nsAccountLock: ${accountlock}
-
replace: userCertificate
${usercerts}-
replace: nsCertSubjectDN
${usersubjects}-
EOF

    rm -f "$line/updated"

  fi

done


#
# Walk through each agreement for replication, enable or disable as needed.
#
find /etc/device/services/ldap/replication/agreement/ -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  if [ ! -e "$line/suffix.d/instance.d/name.txt" ]; then
    continue;
  fi
  if [ "${instance}" != "$(head -n 1 $line/suffix.d/instance.d/name.txt)" ]; then
    continue;
  fi

  if [ ! -e "$line/name.txt" ]; then
    continue;
  elif [ ! -e "$line/host.txt" ]; then
    continue;
  elif [ ! -L "$line/suffix.d" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/suffix.txt" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/userroot.txt" ]; then
    continue;
  elif [ ! -L "$line/suffix.d/instance.d" ]; then
    continue;
  elif [ ! -e "$line/suffix.d/instance.d/name.txt" ]; then
    continue;
  fi

  suffix="$(head -n 1 $line/suffix.d/suffix.txt)"
  userroot="$(head -n 1 $line/suffix.d/userroot.txt)"
  agreement="$(head -n 1 $line/name.txt)"
  hostname="$(head -n 1 $line/host.txt)"
  if [ -e "$line/port.txt" ]; then
    port="$(head -n 1 $line/port.txt)"
  else
    port="636"
  fi

  # remove old agreements
  if test -f "$line/removed"; then

    target=$(readlink -f "$line")

    dsconf "ldapi://%2frun%2fslapd-${instance}.socket" repl-agmt delete --suffix "${suffix}" "${agreement}"

    if test -L "$line/client-certificate.d"; then

      target=$(readlink -f "$line/client-certificate.d")
      uuid="$(basename $target)"

      rm -f "/run/dirsrv/slapd-${instance}-agreement-${uuid}.pem"
      rm -f "/run/dirsrv/slapd-${instance}-agreement-${uuid}.yaml"

    fi

    if test -L "$line/ca-certificate.crt"; then

      rm -f "/run/dirsrv/slapd-${instance}-agreement-ca-${agreement}.pem"
      rm -f "/run/dirsrv/slapd-${instance}-agreement-ca-${agreement}.yaml"

    fi

    # remove folder
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"

  # generate certs if not done earlier in autodiscovery
  else

    options=

    if test -L "$line/client-certificate.d"; then

      target=$(readlink -f "$line/client-certificate.d")
      uuid="$(basename $target)"

      redwax-tool --pem-in="/run/pki-certificate/certificate-${uuid}.pem" \
                  --chain-out --no-root-out --no-crl-out --key-out \
                  --user-out=dirsrv \
                  --pem-out="/run/dirsrv/slapd-${instance}-agreement-${uuid}.pem" \
                  --metadata-out="/run/dirsrv/slapd-${instance}-agreement-${uuid}.yaml"

      options+=" --conn-tls-uri /run/dirsrv/slapd-${instance}-agreement-${uuid}.pem"

    else

      options+=" --no-conn-tls-uri"

    fi

    if test -L "$line/ca-certificate.crt"; then

      redwax-tool --pem-in="$line/ca-certificate.crt" \
                  --root-out \
                  --user-out=dirsrv \
                  --pem-out="/run/dirsrv/slapd-${instance}-agreement-ca-${agreement}.pem" \
                  --metadata-out="/run/dirsrv/slapd-${instance}-agreement-ca-${agreement}.yaml"

      options+=" --conn-tls-ca-uri /run/dirsrv/slapd-${instance}-agreement-ca-${agreement}.pem"

    else

      options+=" --no-conn-tls-ca-uri"

    fi

    # add new agreements
    if test -f "$line/added"; then

      dsconf "ldapi://%2frun%2fslapd-${instance}.socket" repl-agmt create --suffix "${suffix}" --host "${hostname}" --port "${port}" --conn-protocol "LDAPS" --bind-method "SSLCLIENTAUTH"${options} "${agreement}"

      if test -f "$line/disabled.bin"; then
        dsconf "ldapi://%2frun%2fslapd-${instance}.socket" repl-agmt disable --suffix "${suffix}" "${agreement}"
      fi

      rm -f "$line/added"

    # update existing agreements
    elif test -f "$line/updated"; then

      rm -f "$line/error"

      dsconf "ldapi://%2frun%2fslapd-${instance}.socket" repl-agmt set --suffix "${suffix}" --host "${hostname}" --port "${port}" --conn-protocol "LDAPS" --bind-method "SSLCLIENTAUTH"${options} "${agreement}"

      if test -f "$line/disabled.bin"; then
        dsconf "ldapi://%2frun%2fslapd-${instance}.socket" repl-agmt disable --suffix "${suffix}" "${agreement}"
      else
        dsconf "ldapi://%2frun%2fslapd-${instance}.socket" repl-agmt enable --suffix "${suffix}" "${agreement}"
      fi

      rm -f "$line/updated"

    fi

  fi

done


